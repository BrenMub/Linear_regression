library(ncdf4)
library(raster)
library(weathermetrics)
library(sf)
library(chirps)
library(dplyr)
library(lubridate)
library(writexl)
library(ggplot2)
library(readr)
library(tidyverse)
library(tidyr)
library(readxl)
shape <-st_read("C:\\Users\\Usuario\\Desktop\\CIMPA\\Bases\\cuenca_Nagatac.shp")
cuenca_nagatac <- st_set_crs(shape, 5367)
shape_transf <- st_transform(cuenca_nagatac, crs = 4326)
bbox <- st_bbox(shape_transf)
lat_range <- c(bbox["ymin"], bbox["ymax"])
lon_range <- c(bbox["xmin"], bbox["xmax"])
lat_range
lon_range
plot(st_geometry(shape), axes= T)
lonlat <- data.frame(lon_range, lat_range) #Cambiar años
date_ranges <- list(
c("1983-01-01", "1983-06-01"),
c("1983-06-01", "1983-12-31"),
c("1984-01-01", "1984-06-01"),
c("1984-06-01", "1984-12-31"),
c("1985-01-01", "1985-06-01"),
c("1985-06-02", "1985-12-31"),
c("1986-01-01", "1986-06-01"),
c("1986-06-02", "1986-12-31"),
c("1987-01-01", "1987-06-01"),
c("1987-06-02", "1987-12-31")
)
temperature_list_nagatac <- lapply(date_ranges, function(dates) {
get_chirts(lonlat, dates, var = "Tmax")
})
temperature <- do.call(rbind, temperature_list_nagatac)
temperature <- temperature[,-1]
saveRDS(temperature, file = "temperatura_nagatac.rds")
temperature <- readRDS('temperatura_nagatac.rds')
temperature
precipitacion_list_nagatac <- lapply(date_ranges, function(dates) {
get_chirps(lonlat, dates, server = "CHC")
})
precipitacion <- do.call(rbind, precipitacion_list_nagatac)
precipitacion <- precipitacion[,-1]
saveRDS(precipitacion, file = "lluvia_nagatac.rds")
precipitacion
setwd("~/")
setwd("C:/Users/Usuario/Desktop/CIMPA/Codigo/Nagatac")
library(RNCEP)
library(ncdf4)
library(raster)
library(weathermetrics)
library(sf)
library(chirps)
library(dplyr)
library(lubridate)
library(writexl)
library(ggplot2)
library(readr)
library(tidyverse)
library(tidyr)
library(readxl)
shape <-st_read("C:\\Users\\Usuario\\Desktop\\CIMPA\\Bases\\cuenca_Nagatac.shp")
cuenca_nagatac <- st_set_crs(shape, 5367)
shape_transf <- st_transform(cuenca_nagatac, crs = 4326)
bbox <- st_bbox(shape_transf)
lat_range <- c(bbox["ymin"], bbox["ymax"])
lon_range <- c(bbox["xmin"], bbox["xmax"])
lat_range
lon_range
plot(st_geometry(shape), axes= T)
temperature <- readRDS('temperatura_nagatac.rds')
temperature
precipitacion <- readRDS('lluvia_nagatac.rds')
precipitacion
month_range <- c(1,12)     #period of months
year_range <- c(1982,1987) #period of years
lat_range <- c(10.05,10.05)      #latitude range
lon_range <- c(-84.655,-84.655)     #longitude range
data <- NCEP.gather("shum.2m",
level="gaussian",
month_range,
year_range,
lat_range,lon_range,
return.units = TRUE,
reanalysis2=FALSE)
humedad1= NCEP.array2df(data)
humedad1$datetime <- sub("_\\d{2}$", "", humedad1$datetime)
humedad1<- humedad1[!duplicated(humedad1$datetime), ]
humedad_nagatac= rbind(humedad1)
write_xlsx(humedad_caracucho, "C:/Users/Usuario/Downloads/humedad_nagatac.xlsx")
humedad1$datetime <- sub("_\\d{2}$", "", humedad1$datetime)
humedad1<- humedad1[!duplicated(humedad1$datetime), ]
humedad_nagatac= rbind(humedad1)
write_xlsx(humedad_nagatac, "C:/Users/Usuario/Downloads/humedad_nagatac.xlsx")
humedad_nagatac <- read_excel("C:/Users/Usuario/Downloads/humedad_nagatac.xlsx")
humedad_nagatac
indices <- read.table("nino123.txt", header = TRUE)
indices = indices[,c(1,2,9)]
indices <- indices %>%
mutate(
date = sprintf("%04d-%02d", YR, MON)
)
indices <- indices[,-c(1:2)]
minimos <- st_read("C:\\Users\\Usuario\\Desktop\\CIMPA\\Codigo\\Nagatac\\NagatacMinimos.csv")
minimos
month_range <- c(1,12)     #period of months
year_range <- c(1980,1987) #period of years
data <- NCEP.gather("uwnd.10m",
level="gaussian",
month_range,
year_range,
lat_range,lon_range,
return.units = TRUE,
reanalysis2=FALSE)
viento= NCEP.array2df(data)
viento$datetime <- sub("_\\d{2}$", "", viento$datetime)
viento<- viento[!duplicated(viento$datetime), ]
write_xlsx(viento, "C:/Users/Usuario/Downloads/viento_nagatac.xlsx")
viento <- read_excel("C:/Users/Usuario/Downloads/viento_nagatac.xlsx")
viento
indices <- read.table("nino123.txt", header = TRUE)
indices = indices[,c(1,2,9)]
indices <- indices %>%
mutate(
date = sprintf("%04d-%02d", YR, MON)
)
indices <- indices[,-c(1:2)]
str(temperature$date)
str(precipitacion$date)
str(viento$date)
str(humedad_nagatac$date)
colnames(humedad_caracucho)[colnames(humedad_caracucho) == "variable1"] <- "humedad"
colnames(humedad_nagatac)[colnames(humedad_nagatac) == "variable1"] <- "humedad"
humedad_nagatac
colnames(humedad_caracucho)[colnames(humedad_caracucho) == "latitude"] <- "lat"
humedad_nagatac
colnames(humedad_nagatac)[colnames(humedad_nagatac) == "latitude"] <- "lat"
colnames(humedad_nagatac)[colnames(humedad_nagatac) == "longitude"] <- "lon"
humedad_nagatac
# Asegurarse de que la columna datetime tiene el formato correcto para su conversión
humedad_nagatac$datetime <- as.Date(paste0(humedad_nagatac$datetime, "_01"), format = "%Y_%m_%d")
humedad_nagatac
humedad1$datetime <- sub("_\\d{2}$", "", humedad1$datetime)
humedad1<- humedad1[!duplicated(humedad1$datetime), ]
humedad_nagatac= rbind(humedad1)
write_xlsx(humedad_nagatac, "C:/Users/Usuario/Downloads/humedad_nagatac.xlsx")
humedad_nagatac <- read_excel("C:/Users/Usuario/Downloads/humedad_nagatac.xlsx")
humedad_nagatac
month_range <- c(1,12)     #period of months
year_range <- c(1982,1987) #period of years
lat_range <- c(10.05,10.05)      #latitude range
lon_range <- c(-84.655,-84.655)     #longitude range
data <- NCEP.gather("shum.2m",
level="gaussian",
month_range,
year_range,
lat_range,lon_range,
return.units = TRUE,
reanalysis2=FALSE)
humedad1= NCEP.array2df(data)
humedad1$datetime <- sub("_\\d{2}$", "", humedad1$datetime)
humedad1<- humedad1[!duplicated(humedad1$datetime), ]
humedad_nagatac= rbind(humedad1)
write_xlsx(humedad_nagatac, "C:/Users/Usuario/Downloads/humedad_nagatac.xlsx")
humedad_nagatac <- read_excel("C:/Users/Usuario/Downloads/humedad_nagatac.xlsx")
humedad_nagatac
colnames(humedad_nagatac)[colnames(humedad_nagatac) == "variable1"] <- "humedad"
colnames(humedad_nagatac)[colnames(humedad_nagatac) == "latitude"] <- "lat"
colnames(humedad_nagatac)[colnames(humedad_nagatac) == "longitude"] <- "lon"
# Asegurarse de que la columna datetime tiene el formato correcto para su conversión
humedad_nagatac$datetime <- as.Date(paste0(humedad_nagatac$datetime, "_01"), format = "%Y_%m_%d")
colnames(humedad_caracucho)[colnames(humedad_caracucho) == "datetime"] <- "date"
colnames(humedad_nagatac)[colnames(humedad_nagatac) == "datetime"] <- "date"
humedad_nagatac
viento
colnames(viento)[colnames(viento) == "variable1"] <- "viento"
colnames(viento)[colnames(viento) == "latitude"] <- "lat"
colnames(viento)[colnames(viento) == "longitude"] <- "lon"
head(viento$datetime)
# Asegurarse de que la columna datetime tiene el formato correcto para su conversión
viento$datetime <- as.Date(paste0(viento$datetime, "_01"), format = "%Y_%m_%d")
colnames(viento)[colnames(viento) == "datetime"] <- "date"
viento
str(temperature$date)
str(precipitacion$date)
str(viento$date)
str(humedad_nagatac$date)
# Eliminar columnas 'lat' y 'lon' en humedad_caracucho
humedad_caracucho <- humedad_caracucho[, !(names(humedad_caracucho) %in% c("lat", "lon"))]
# Eliminar columnas 'lat' y 'lon' en humedad_caracucho
humedad_nagatac <- humedad_nagatac[, !(names(humedad_nagatac) %in% c("lat", "lon"))]
# Eliminar columnas 'lat' y 'lon' en viento
viento <- viento[, !(names(viento) %in% c("lat", "lon"))]
datos1 <- Reduce(function(x, y) merge(x, y, by = "date", all = FALSE),
list(temperature, precipitacion, viento, humedad_caracucho))
datos1 <- Reduce(function(x, y) merge(x, y, by = "date", all = FALSE),
list(temperature, precipitacion, viento, humedad_nagatac))
colnames(datos1)
datos1_resumido <- datos1 %>%
group_by(date) %>%
summarise(
chirps = mean(chirps, na.rm = TRUE),  # Promediar 'chirps'
chirts = mean(chirts, na.rm = TRUE),  # Promediar 'chirts'
viento = mean(viento, na.rm = TRUE),  # Promediar 'viento'
humedad = mean(humedad, na.rm = TRUE),  # Promediar 'humedad'
lon.x = first(lon.x),  # Mantener el primer valor de 'lon.x'
lat.x = first(lat.x),  # Mantener el primer valor de 'lat.x'
lon.y = first(lon.y),  # Mantener el primer valor de 'lon.y'
lat.y = first(lat.y),  # Mantener el primer valor de 'lat.y'
.groups = "drop"  # Eliminar la agrupación para que el dataframe sea normal
)
datos1_resumido
datos1_resumido$Dia <- day(datos1_resumido$date)
datos1_resumido$Mes <- month(datos1_resumido$date)
datos1_resumido$Ano <- year(datos1_resumido$date)
base_nagatac <- st_read("C:\Users\Usuario\Desktop\CIMPA\Codigo\Nagatac\NagatacDiarios.csv")
base_nagatac <- st_read("C:\\Users\\Usuario\\Desktop\\CIMPA\\Codigo\\Nagatac\\NagatacDiarios.csv")
base_nagatac
summary(base_caracucho)
summary(base_nagatac)
base_nagatac$Ano <- as.numeric(base_nagatac$Ano)
base_nagatac$Dia <- as.numeric(base_nagatac$Dia)
base_nagatac$Caudal_Diario <- as.numeric(base_nagatac$Caudal_Diario)
summary(base_caracucho)
summary(base_nagatac)
summary(datos1_resumido)
base_nagatac <- base_nagatac %>%
mutate(Mes = case_when(
Mes == "ENE" ~ 1,  Mes == "FEB" ~ 2,  Mes == "MAR" ~ 3,
Mes == "ABR" ~ 4,  Mes == "MAY" ~ 5,  Mes == "JUN" ~ 6,
Mes == "JUL" ~ 7,  Mes == "AGOS" ~ 8,  Mes == "SET" ~ 9,
Mes == "OCT" ~ 10, Mes == "NOV" ~ 11, Mes == "DIC" ~ 12
))
base_nagatac$Dia <- as.numeric(base_nagatac$Dia)
datos1_resumido$Dia <- as.numeric(datos1_resumido$Dia)
base_nagatc$Dia <- as.numeric(base_nagatac$Dia)
base_nagatac
base_nagatac$Dia <- as.numeric(base_nagatac$Dia)
datos1_resumido$Dia <- as.numeric(datos1_resumido$Dia)
base_nagatac$Dia <- as.numeric(base_nagatac$Dia)
datos1_resumido$Dia <- as.numeric(datos1_resumido$Dia)
df_interseccion <- inner_join(base_caracucho, datos1_resumido, by = c("Ano", "Mes", "Dia"))
df_interseccion <- inner_join(base_nagatac, datos1_resumido, by = c("Ano", "Mes", "Dia"))
df_interseccion
lags <- df_interseccion %>%
arrange(date) %>%  # Asegurar orden temporal
mutate(
caudal_lag_1m = lag(Caudal_Diario, 30),  # Caudal hace 1 mes
caudal_lag_2m = lag(Caudal_Diario, 60),  # Caudal hace 2 meses
caudal_lag_3m = lag(Caudal_Diario, 90),  # Caudal hace 3 meses
caudal_lag_4m = lag(Caudal_Diario, 120), # Caudal hace 4 meses
caudal_lag_5m = lag(Caudal_Diario, 150), # Caudal hace 5 meses
caudal_lag_6m = lag(Caudal_Diario, 180), # Caudal hace 6 meses
temp_lag_2m = lag(chirts, 2),  # Temperatura hace 2 meses
temp_lag_3m = lag(chirts, 3),  # Temperatura hace 3 meses
temp_lag_4m = lag(chirts, 4), # Temperatura hace 4 meses
temp_lag_5m = lag(chirts, 5), # Temperatura hace 5 meses
temp_lag_6m = lag(chirts, 6), # Temperatura hace 6 meses
prep_lag_1m = lag(chirps, 1),  # Precipitación hace 1 mes
prep_lag_2m = lag(chirps, 2),  # Precipitación hace 2 meses
prep_lag_3m = lag(chirps, 3),  # Precipitación hace 3 meses
prep_lag_4m = lag(chirps, 4), # Precipitación hace 4 meses
prep_lag_5m = lag(chirps, 5), # Precipitación hace 5 meses
prep_lag_6m = lag(chirps, 6)  # Precipitación hace 6 meses
)
indices1 <- indices %>%
separate(date, into = c("Ano", "Mes"), sep = "-")
indices1 <- indices %>%
separate(date, into = c("Ano", "Mes"), sep = "-")
indices1$Ano <- as.numeric(indices1$Ano)
indices1$Mes <- as.numeric(indices1$Mes)
summary(indices1)
summary(lags)
base <- inner_join(lags, indices1, by = c("Ano", "Mes"))
base
# Convertir la columna 'date' a tipo Date
base$date <- as.Date(base$date)
# Convertir las columnas que deben ser numéricas
base$Caudal_Diario <- as.numeric(base$Caudal_Diario)
base$chirps <- as.numeric(base$chirps)
base$chirts <- as.numeric(base$chirts)
base$viento <- as.numeric(base$viento)
base$humedad <- as.numeric(base$humedad)
base$caudal_lag_1m <- as.numeric(base$caudal_lag_1m)
base$caudal_lag_2m <- as.numeric(base$caudal_lag_2m)
base$caudal_lag_3m <- as.numeric(base$caudal_lag_3m)
base$caudal_lag_4m <- as.numeric(base$caudal_lag_4m)
base$caudal_lag_5m <- as.numeric(base$caudal_lag_5m)
base$caudal_lag_6m <- as.numeric(base$caudal_lag_6m)
base$temp_lag_2m <- as.numeric(base$temp_lag_2m)
base$temp_lag_3m <- as.numeric(base$temp_lag_3m)
base$temp_lag_4m <- as.numeric(base$temp_lag_4m)
base$temp_lag_5m <- as.numeric(base$temp_lag_5m)
base$temp_lag_6m <- as.numeric(base$temp_lag_6m)
base$prep_lag_1m <- as.numeric(base$prep_lag_1m)
base$prep_lag_2m <- as.numeric(base$prep_lag_2m)
base$prep_lag_3m <- as.numeric(base$prep_lag_3m)
base$prep_lag_4m <- as.numeric(base$prep_lag_4m)
base$prep_lag_5m <- as.numeric(base$prep_lag_5m)
base$prep_lag_6m <- as.numeric(base$prep_lag_6m)
base$NINO3.4 <- as.numeric(base$NINO3.4)
# También verificar que las columnas "Dia", "Mes", y "Ano" estén numéricas
base$Dia <- as.numeric(base$Dia)
base$Mes <- as.numeric(base$Mes)
base$Ano <- as.numeric(base$Ano)
str(base)
saveRDS(base, file = "base_nagatac.rds")
write.csv(base, "C:/Users/Usuario/Downloads/base_nagatac.csv", row.names = FALSE)
library(randomForest)
library(ranger)
library(dplyr)
library(caret)
library(randomForest)
library(ranger)
library(dplyr)
library(caret)
install.packages("install.packages("recipes")",dependencies= TRUE)  # Alternativa más rápida
install.packages("recipes",dependencies= TRUE)  # Alternativa más rápida
library(randomForest)
library(ranger)
library(dplyr)
library(caret)
library(randomForest)
library(ranger)
library(dplyr)
library(caret)
install.packages("caret",dependencies= TRUE)  # Alternativa más rápida
base <- na.omit(base)  # Elimina filas con NA # ver
sum(is.na(base))
set.seed(123)  # Para reproducibilidad
n <- nrow(base)
train_index <- sample(1:n, size = 0.8 * n)
train_data <-base[train_index, ]
test_data  <- base[-train_index, ]
# Entrenar el modelo Random Forest
modelo_rf <- randomForest(Caudal_Diario ~ chirts + chirps + NINO3.4 + humedad + viento +
caudal_lag_1m + caudal_lag_2m + caudal_lag_3m +
caudal_lag_4m + caudal_lag_5m + caudal_lag_6m +
temp_lag_2m + temp_lag_3m + temp_lag_4m + temp_lag_5m + temp_lag_6m +
prep_lag_1m + prep_lag_2m + prep_lag_3m + prep_lag_4m + prep_lag_5m + prep_lag_6m,
data = train_data,
ntree = 500,  # Número de árboles
mtry = 3,     # Variables consideradas en cada división
importance = TRUE)  # Importancia de variables
# Eliminar filas con NA en los datos de prueba
test_data_clean <- na.omit(test_data)
# Asegurarse de que las predicciones también coincidan
predicciones_clean <- predict(modelo_rf, newdata = test_data_clean)
# Volver a calcular los errores
MAE <- mean(abs(test_data_clean$Caudal_Diario - predicciones_clean))
MSE <- mean((test_data_clean$Caudal_Diario - predicciones_clean)^2)
RMSE <- sqrt(MSE)
R2 <- 1 - (sum((test_data_clean$Caudal_Diario - predicciones_clean)^2) / sum((test_data_clean$Caudal_Diario - mean(test_data_clean$Caudal_Diario))^2))
# Mostrar resultados
cat("MAE:", MAE, "\n")
cat("MSE:", MSE, "\n")
cat("RMSE:", RMSE, "\n")
cat("R²:", R2, "\n")
# Obtener el valor promedio de los datos reales
valor_promedio <- mean(test_data$Caudal_Diario)
# Calcular la precisión en porcentaje
precision <- (1 - MAE / valor_promedio) * 100
# Mostrar la precisión
cat("Precisión del modelo:", precision, "%\n")
resultados <- data.frame(
Real = test_data$Caudal_Diario,  # Valores reales
Predicción = predicciones_clean  # Predicciones del modelo
)
# Verificar el contenido del DataFrame
resultados
ggplot(grafico_df, aes(x = Fecha)) +
geom_line(aes(y = Real, color = "Real"), size = 0.7) +
geom_line(aes(y = Predicción, color = "Predicción"), size = 0.7, linetype = 1) +
labs(title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Caudal") +
scale_color_manual(values = c("Real" = "blue", "Predicción" = "#7D7D7D")) +
theme_minimal() +
theme(legend.title = element_blank())
grafico_df <- data.frame(
Fecha = test_data$date,
Real = test_data$Caudal_Diario,
Predicción = resultados
)
ggplot(grafico_df, aes(x = Fecha)) +
geom_line(aes(y = Real, color = "Real"), size = 0.7) +
geom_line(aes(y = Predicción, color = "Predicción"), size = 0.7, linetype = 1) +
labs(title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Caudal") +
scale_color_manual(values = c("Real" = "blue", "Predicción" = "#7D7D7D")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(grafico_df, aes(x = Fecha)) +
geom_line(aes(y = Real, color = "Real"), size = 0.7) +
geom_line(aes(y = Prediccion, color = "Predicción"), size = 0.7, linetype = 1) +
labs(title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Caudal") +
scale_color_manual(values = c("Real" = "blue", "Predicción" = "#7D7D7D")) +
theme_minimal() +
theme(legend.title = element_blank())
grafico_df <- data.frame(
Fecha = test_data$date,
Real = test_data$Caudal_Diario,
Prediccion = resultados
)
ggplot(grafico_df, aes(x = Fecha)) +
geom_line(aes(y = Real, color = "Real"), size = 0.7) +
geom_line(aes(y = Prediccion, color = "Predicción"), size = 0.7, linetype = 1) +
labs(title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Caudal") +
scale_color_manual(values = c("Real" = "blue", "Predicción" = "#7D7D7D")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(grafico_df, aes(x = Fecha)) +
geom_line(aes(y = Real, color = "Real"), size = 0.7) +
geom_line(aes(y = Prediccion, color = "Prediccion"), size = 0.7, linetype = 1) +
labs(title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Caudal") +
scale_color_manual(values = c("Real" = "blue", "Predicción" = "#7D7D7D")) +
theme_minimal() +
theme(legend.title = element_blank())
grafico_df <- data.frame(
Fecha = test_data$date,
Real = test_data$Caudal_Diario,
Prediccion = resultados
)
grafico_df
ggplot(grafico_df, aes(x = Fecha)) +
geom_line(aes(y = Real, color = "Real"), size = 0.7) +
geom_line(aes(y = Prediccion.Predicción, color = "Prediccion"), size = 0.7, linetype = 1) +
labs(title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Caudal") +
scale_color_manual(values = c("Real" = "blue", "Predicción" = "#7D7D7D")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(grafico_df, aes(x = Fecha)) +
geom_line(aes(y = Real, color = "Real"), size = 0.7) +
geom_line(aes(y = Prediccion, color = "Predicción"), size = 0.7, linetype = 1) +
labs(title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Caudal") +
scale_color_manual(values = c("Real" = "blue", "Predicción" = "#7D7D7D")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(grafico_df, aes(x = Fecha)) +
geom_line(aes(y = Real, color = "Real"), size = 0.7) +
geom_line(aes(y = Prediccion.Predicción, color = "Prediccion.Predicción"), size = 0.7, linetype = 1) +
labs(title = "Comparación entre valores reales y predicciones",
x = "Fecha",
y = "Caudal") +
scale_color_manual(values = c("Real" = "blue", "Predicción" = "#7D7D7D")) +
theme_minimal() +
theme(legend.title = element_blank())
# Ajustar el modelo de regresión lineal múltiple con todas las variables
modelo_ml <- lm(Caudal_Diario ~ chirts + chirps + NINO3.4 + humedad + viento
caudal_lag_1m + caudal_lag_2m + caudal_lag_3m +
# Ajustar el modelo de regresión lineal múltiple con todas las variables
modelo_ml <- lm(Caudal_Diario ~ chirts + chirps + NINO3.4 + humedad + viento +
caudal_lag_1m + caudal_lag_2m + caudal_lag_3m +
caudal_lag_4m + caudal_lag_5m + caudal_lag_6m +
temp_lag_2m + temp_lag_3m + temp_lag_4m + temp_lag_5m + temp_lag_6m +
prep_lag_1m + prep_lag_2m + prep_lag_3m + prep_lag_4m + prep_lag_5m + prep_lag_6m,
data = train_data)
# Resumen del modelo para ver los coeficientes y la significancia
summary(modelo_ml)
```{r}
# Hacer predicciones sobre el conjunto de prueba
predicciones_ml <- predict(modelo_ml, newdata = test_data)
# Comparar predicciones con los valores reales
resultado <- data.frame(Real = test_data$Caudal_Diario, Predicción = predicciones_ml)
# Visualizar la comparación
head(resultado)
```
# Gráfico de dispersión entre los valores reales y las predicciones
ggplot(resultado, aes(x = Real, y = Predicción)) +
geom_point(color = "blue") +  # Puntos azules
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Línea ideal
labs(
title = "Comparación entre Valores Reales y Predicciones",
x = "Valor Real",
y = "Predicción"
) +
theme_minimal()
# Calcular MAE (Error Absoluto Medio)
MAE <- mean(abs(test_data$Caudal_Diario - predicciones_ml))
# Calcular MSE (Error Cuadrático Medio)
MSE <- mean((test_data$Caudal_Diario - predicciones_ml)^2)
# Calcular RMSE (Raíz del MSE)
RMSE <- sqrt(MSE)
# Calcular R² (Coeficiente de Determinación)
R2 <- 1 - (sum((test_data$Caudal_Diario - predicciones_ml)^2) / sum((test_data$Caudal_Diario - mean(test_data$Caudal_Diario))^2))
# Mostrar los resultados
cat("MAE:", MAE, "\n")
cat("MSE:", MSE, "\n")
cat("RMSE:", RMSE, "\n")
cat("R²:", R2, "\n")
# Calcular el valor promedio de Caudal_Diario
valor_promedio_caudal <- mean(test_data$Caudal_Diario)
# Calcular el porcentaje de precisión basado en el MAE
precision_mae <- (1 - MAE / valor_promedio_caudal) * 100
# Mostrar el resultado
cat("Porcentaje de Precisión basado en MAE:", precision_mae, "%\n")
